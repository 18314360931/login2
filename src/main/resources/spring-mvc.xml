<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">

	<!-- 配置组件扫描 -->
	<context:component-scan base-package="*" />
	<!-- 配置mvc注解扫描(注册驱动) -->
	<mvc:annotation-driven />

	<util:properties id="config" location="classpath:db.properties" />
	<!-- 配置连接池 -->

	<!-- 不再使用mybatis自带连接池,而是使用spring管理连接池 -->
	<bean id="ds" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="#{config.driver}" />
		<property name="url" value="#{config.url}" />
		<property name="username" value="#{config.username}" />
		<property name="password" value="#{config.password}" />
	</bean>

	<!-- 配置SqlSessionFactoryBean -->
	<!-- spring集成mybatis,不再需要,mybatis的配置文件, 使用 SqlSessionFactoryBean 来代替mybatis配置文件 -->
	<bean id="ssfb" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="ds" />
		<property name="mapperLocations" value="classpath:entity/*.xml" />
	</bean>

	<!-- 配置MapperScannerConfig 负责扫描指定包下面的所有的mapper映射器 生成符合这些接口要求的对象,(其实,就是调用SqlSession的getMapper方法 
		),另外,还会将这些对象添加到spring容器里面( 默认的id是首字母小写之后的接口名) ，也可以使用@Responsittory注解 -->

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="dao" />
		<!-- 我们只扫描特定的接口 -->
		<property name="annotationClass" value="annotation.MyBatisRepository" />
	</bean>


	<!-- 配置视图解析器(ViewResolver) -->
	<bean id="jspViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 配置拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/*" />
			<mvc:exclude-mapping path="/toLogin.do" />
			<mvc:exclude-mapping path="/login.do" />
			<bean class="interceptors.SessionInterceptor" />

		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 配置简单异常处理器 -->
	<!-- <bean -->
	<!-- class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"> -->
	<!-- <property name="exceptionMappings"> -->
	<!-- <props> -->
	<!-- <prop key="java.lang.NumberFormatException">error1</prop> -->
	<!-- <prop key="java.lang.StringIndexOutOfBoundsException">error2</prop> -->
	<!-- </props> -->
	<!-- </property> -->
	<!-- </bean> -->


</beans>